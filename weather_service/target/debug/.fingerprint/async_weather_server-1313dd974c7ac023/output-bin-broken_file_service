{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `Box<dyn std::error::Error + Send>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/broken_file_service.rs","byte_start":3134,"byte_end":3135,"line_start":92,"line_end":92,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"            ).await? {","highlight_start":20,"highlight_end":21}],"label":"the trait `From<Elapsed>` is not implemented for `Box<dyn std::error::Error + Send>`, which is required by `Result<(), Box<dyn std::error::Error + Send>>: FromResidual<Result<Infallible, Elapsed>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/broken_file_service.rs","byte_start":3134,"byte_end":3135,"line_start":92,"line_end":92,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"            ).await? {","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/bin/broken_file_service.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\n  `Box<OsStr>` implements `From<OsString>`\n  `Box<Path>` implements `From<&Path>`\n  `Box<Path>` implements `From<Cow<'_, Path>>`\nand 18 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(), Box<dyn std::error::Error + Send>>` to implement `FromResidual<Result<Infallible, Elapsed>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `Box<dyn std::error::Error + Send>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/broken_file_service.rs:92:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ).await? {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<Elapsed>` is not implemented for `Box<dyn std::error::Error + Send>`, which is required by `Result<(), Box<dyn std::error::Error + Send>>: FromResidual<Result<Infallible, Elapsed>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m             `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m             `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m             `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m             `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m             `Box<OsStr>` implements `From<OsString>`\u001b[0m\n\u001b[0m             `Box<Path>` implements `From<&Path>`\u001b[0m\n\u001b[0m             `Box<Path>` implements `From<Cow<'_, Path>>`\u001b[0m\n\u001b[0m           and 18 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(), Box<dyn std::error::Error + Send>>` to implement `FromResidual<Result<Infallible, Elapsed>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `Box<dyn std::error::Error + Send>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/broken_file_service.rs","byte_start":3863,"byte_end":3864,"line_start":113,"line_end":113,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"            ).await? {","highlight_start":20,"highlight_end":21}],"label":"the trait `From<Elapsed>` is not implemented for `Box<dyn std::error::Error + Send>`, which is required by `Result<(), Box<dyn std::error::Error + Send>>: FromResidual<Result<Infallible, Elapsed>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/broken_file_service.rs","byte_start":3863,"byte_end":3864,"line_start":113,"line_end":113,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"            ).await? {","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/bin/broken_file_service.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\n  `Box<OsStr>` implements `From<OsString>`\n  `Box<Path>` implements `From<&Path>`\n  `Box<Path>` implements `From<Cow<'_, Path>>`\nand 18 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(), Box<dyn std::error::Error + Send>>` to implement `FromResidual<Result<Infallible, Elapsed>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `Box<dyn std::error::Error + Send>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/broken_file_service.rs:113:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ).await? {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<Elapsed>` is not implemented for `Box<dyn std::error::Error + Send>`, which is required by `Result<(), Box<dyn std::error::Error + Send>>: FromResidual<Result<Infallible, Elapsed>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<OsString>`\u001b[0m\n\u001b[0m              `Box<Path>` implements `From<&Path>`\u001b[0m\n\u001b[0m              `Box<Path>` implements `From<Cow<'_, Path>>`\u001b[0m\n\u001b[0m            and 18 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(), Box<dyn std::error::Error + Send>>` to implement `FromResidual<Result<Infallible, Elapsed>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
